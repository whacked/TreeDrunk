# gave up figuring out how to do a backreference for begin_[\w]+ -- doesn't seem worth the trouble at the moment >:-(
grammar OrgMode
  rule document
    (headline / specialblocksource / specialblockquote / specialblockcatchall / comment / listunordered / listordered / hyperlink / codetext / boldtext / underlinedtext / italicstext / verbatimtext / horizontalrule / word / paragraphbreak / whitespace / line)* {
        def content
            elements.map{ |e| e.content }
        end
    }
  end

  rule EOL
    ("\n" / "\r\n") {
        def content
            [:EOL, text_value]
        end
    }
  end
  
  rule paragraphbreak
    EOL EOL+ {
        def content
            [:paragraphbreak, text_value]
        end
    }
  end

  rule whitespace
    [\s]+ {
        def content
            [:whitespace, text_value]
        end
    }
  end

  rule asterisk
    [*] {
        def content
            [:asterisk, text_value]
        end
    }
  end

  rule nonasterisk
    [^*] {
        def content
            [:nonasterisk, text_value]
        end
    }
  end
  
  rule headline
    asterisk+ [\s]+ (!EOL .)+ EOL {
        def content
            [:headline, text_value[0...-1]]
        end
    }
  end
  
  rule line
    (!EOL .)* EOL {
        def content
            [:line, text_value]
        end
    }
  end

  rule boldtext
    "*" (!"*" .)+ "*" {
        def content
            [:boldtext, text_value[1...-1]]
        end
    }
  end

  rule codetext
    "=" (!"=" .)+ "=" {
        def content
            [:codetext, text_value[1...-1]]
        end
    }
  end

  rule underlinedtext
    "_" (!"_" .)+ "_" {
        def content
            [:underlinedtext, text_value[1...-1]]
        end
    }
  end

  rule italicstext
    "/" (!"/" .)+ "/" {
        def content
            [:italicstext, text_value[1...-1]]
        end
    }
  end

  rule verbatimtext
    "~" (!"~" .)+ "~" {
        def content
            [:verbatimtext, text_value[1...-1]]
        end
    }
  end
  
  rule word
    (!EOL ![\s] .)+ {
        def content
            [:word, text_value]
        end
    }
  end

  rule plaintext
    (!EOL .)+ {
        def content
            [:plaintext, text_value]
        end
    }
  end

  rule horizontalrule
    "-----" "-"* EOL {
        def content
            [:horizontalrule, text_value]
        end
    }
  end

  rule hyperlink
    "[[" (!"]" .)+ ("][" (!"]" .)+)? "]]" {
        def content
            [:hyperlink, text_value]
        end
    }
  end

  rule specialblockcatchall
    "#+" ("begin" / "BEGIN") (!EOL .)* EOL (!"#+end" !"#+END" .)* ("#+end" / "#+END") (!EOL .)* EOL {
        def content
            [:specialblockcatchall, text_value]
        end
    }
  end
    
  rule specialblockquote
    "#+" ("begin_quote" / "BEGIN_QUOTE") (!EOL .)* EOL (!"#+end_quote" !"#+END_QUOTE" .)* ("#+end_quote" / "#+END_QUOTE") (!EOL [\s])* EOL {
        def content
            [:specialblockquote, text_value]
        end
    }
  end
    
  rule specialblocksource
    "#+" ("begin_src" / "BEGIN_SRC") (!EOL .)* EOL (!"#+end_src" !"#+END_SRC" .)* ("#+end_src" / "#+END_SRC") (!EOL [\s])* EOL {
        def content
            [:specialblocksource, text_value]
        end
    }
  end
    
  rule comment
    EOL? "#" (!EOL .)+ EOL {
        def content
            [:comment, text_value]
        end
    }
  end
    
  rule listunordered
    whitespace+ ("-" / "+") whitespace+ (!EOL .)+ {
        def content
            [:listunordered, text_value]
        end
    }
  end
    
  rule listordered
    whitespace+ [0-9]+ ("." / ")") whitespace+ (!EOL .)+ {
        def content
            [:listordered, text_value]
        end
    }
  end
    
end
